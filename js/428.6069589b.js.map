{"version":3,"file":"js/428.6069589b.js","mappings":"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","sources":["webpack://cloud-music/./src/views/search/searchChildren/SearchSong.vue","webpack://cloud-music/src/views/search/searchChildren/SearchSong.vue","webpack://cloud-music/./src/views/search/searchChildren/SearchSong.vue?b426","webpack://cloud-music/./src/views/search/searchChildren/SearchSong.vue?087d","webpack://cloud-music/./src/plugins/utils.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"SearchSong\"},[_c('div',{staticClass:\"tip\"},[_vm._v(\"找到 \"+_vm._s(_vm.songCount)+\" 首单曲\")]),(_vm.multiMatch.artist && _vm.currentPage == 1)?_c('div',{staticClass:\"multiMatch\"},[_c('div',{staticClass:\"matchTitle\"},[_vm._v(\"最佳匹配\")]),_c('div',{staticClass:\"matchResult\",on:{\"click\":function($event){return _vm.goToSingerDetail(_vm.multiMatch.artist[0].id)}}},[_c('div',{staticClass:\"matchCover\"},[_c('img',{attrs:{\"src\":_vm.multiMatch.artist[0].img1v1Url + '?param==200y200',\"alt\":\"\"}})]),_c('div',{staticClass:\"matchName\"},[_vm._v(\"歌手：\"+_vm._s(_vm.multiMatch.artist[0].name))]),_c('i',{staticClass:\"iconfont icon-arrow-right-bold\"})])]):_vm._e(),_c('el-table',{staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.searchSongList,\"size\":\"mini\",\"highlight-current-row\":\"\",\"stripe\":\"\"},on:{\"row-dblclick\":_vm.clickRow}},[_c('el-table-column',{attrs:{\"label\":\"\",\"width\":\"30\",\"type\":\"index\",\"index\":_vm.handleIndex}}),_c('el-table-column',{attrs:{\"prop\":\"name\",\"label\":\"音乐标题\",\"min-width\":\"200\"}}),_c('el-table-column',{attrs:{\"prop\":\"ar[0].name\",\"label\":\"歌手\",\"min-width\":\"100\"}}),_c('el-table-column',{attrs:{\"prop\":\"al.name\",\"label\":\"专辑\",\"min-width\":\"170\"}}),_c('el-table-column',{attrs:{\"prop\":\"dt\",\"label\":\"时长\",\"min-width\":\"60\"}})],1),(_vm.searchSongList.length != 0)?_c('div',{staticClass:\"page\"},[_c('el-pagination',{attrs:{\"background\":\"\",\"layout\":\"prev, pager, next\",\"total\":_vm.songCount,\"small\":\"\",\"page-size\":30,\"current-page\":_vm.currentPage},on:{\"current-change\":_vm.pageChange}})],1):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"SearchSong\">\r\n    <div class=\"tip\">找到 {{ songCount }} 首单曲</div>\r\n    <div class=\"multiMatch\" v-if=\"multiMatch.artist && currentPage == 1\">\r\n      <div class=\"matchTitle\">最佳匹配</div>\r\n      <div\r\n        class=\"matchResult\"\r\n        @click=\"goToSingerDetail(multiMatch.artist[0].id)\"\r\n      >\r\n        <div class=\"matchCover\">\r\n          <img\r\n            :src=\"multiMatch.artist[0].img1v1Url + '?param==200y200'\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div class=\"matchName\">歌手：{{ multiMatch.artist[0].name }}</div>\r\n        <i class=\"iconfont icon-arrow-right-bold\"></i>\r\n      </div>\r\n    </div>\r\n    <!-- 表格 -->\r\n    <!-- 第三方组件的table在退出后不会销毁，而是继续保留，导致多个table同时存在 ref变得不唯一 \r\n              解决办法：避免使用refs..（拼接也不好使） -->\r\n    <!-- 这里的播放效果样式不能直接简单的操作DOM，因为有分页，也可以做成无限滚动，或者根据索引渲染，但是我懒得搞了 -->\r\n    <el-table\r\n      :data=\"searchSongList\"\r\n      size=\"mini\"\r\n      style=\"width: 100%\"\r\n      @row-dblclick=\"clickRow\"\r\n      highlight-current-row\r\n      stripe\r\n    >\r\n      <el-table-column label=\"\" width=\"30\" type=\"index\" :index=\"handleIndex\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"name\" label=\"音乐标题\" min-width=\"200\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"ar[0].name\" label=\"歌手\" min-width=\"100\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"al.name\" label=\"专辑\" min-width=\"170\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"dt\" label=\"时长\" min-width=\"60\"> </el-table-column>\r\n    </el-table>\r\n    <!-- 分页 -->\r\n    <div class=\"page\" v-if=\"searchSongList.length != 0\">\r\n      <el-pagination\r\n        background\r\n        layout=\"prev, pager, next\"\r\n        :total=\"songCount\"\r\n        small\r\n        :page-size=\"30\"\r\n        :current-page=\"currentPage\"\r\n        @current-change=\"pageChange\"\r\n      >\r\n      </el-pagination>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { handleMusicTime } from \"plugins/utils\";\r\nexport default {\r\n  name: \"SearchSong\",\r\n  data() {\r\n    return {\r\n      multiMatch: {},\r\n      searchSongList: [],\r\n      songCount: 0,\r\n      currentPage: 1,\r\n    };\r\n  },\r\n  methods: {\r\n    // 请求\r\n    // 获取最佳匹配\r\n    async getMultMath() {\r\n      let res = await this.$request(\"/search/multimatch\", {\r\n        keywords: this.$route.params.id,\r\n      });\r\n      this.multiMatch = res.data.result;\r\n    },\r\n\r\n    // 请求搜索单曲\r\n    async getSearchSong() {\r\n      let res = await this.$request(\"/cloudsearch\", {\r\n        keywords: this.$route.params.id,\r\n        offset: 30 * (this.currentPage - 1),\r\n      });\r\n      this.songCount = res.data.result.songCount;\r\n      this.searchSongList = res.data.result.songs;\r\n      // 对数据的音乐时长进行处理\r\n      this.searchSongList.forEach((item, index) => {\r\n        this.searchSongList[index].dt = handleMusicTime(item.dt);\r\n      });\r\n    },\r\n\r\n    // 事件响应\r\n    // 处理索引\r\n    handleIndex(index) {\r\n      // console.log(index);\r\n      index = index + 1 + 30 * (this.currentPage - 1);\r\n      if (index < 10) {\r\n        return \"0\" + index;\r\n      } else {\r\n        return index;\r\n      }\r\n    },\r\n    // 双击table的row的回调\r\n    async clickRow(row) {\r\n      // 这里双击应该是要把当前双击的歌曲插入到当前的歌单中\r\n      // 首先获取当前的歌单列表和歌曲索引\r\n      let musicList = this.$store.state.musicList;\r\n      let currentIndex = this.$store.state.currentIndex;\r\n      // 先判断该歌曲是否已经在歌单中存在，避免重复点击导致歌单出现相同歌曲\r\n      let isExist = musicList.find((item) => item.id == row.id);\r\n      if (isExist) {\r\n        // 如果已经存在 则只提交歌曲id并return出去\r\n        this.$store.commit(\"updateMusicId\", row.id);\r\n        return;\r\n      }\r\n      this.$store.commit(\"changePlayState\", false);\r\n      // 将请求到的歌曲详情插入到歌单对应位置并提交至vuex\r\n      musicList.splice(currentIndex + 1, 0, row);\r\n      this.$store.commit(\"updateMusicId\", row.id);\r\n      this.$store.commit(\"updateMusicList\", {\r\n        musicList,\r\n        musicListId: this.$store.state.musicListId,\r\n      });\r\n    },\r\n    // 评论点击翻页的回调\r\n    pageChange(page) {\r\n      this.currentPage = page;\r\n      this.searchSongList = [];\r\n      this.getSearchSong();\r\n    },\r\n    // 点击最佳匹配的回调\r\n    goToSingerDetail(id) {\r\n      this.$router.push({ name: \"singerDetail\", params: { id } });\r\n    },\r\n    handleDOM(current, last) {\r\n      if (document.querySelector(\".SearchSong\")) {\r\n        let tableRows = document\r\n          .querySelector(\".SearchSong\")\r\n          .querySelectorAll(\".el-table__row\");\r\n        // 遍历当前musicList 找到当前播放的index的行进行渲染\r\n        // console.log(tableRows);\r\n        let index = this.searchSongList.findIndex(\r\n          (item) => item.id == current\r\n        );\r\n        console.log(index)\r\n        // console.log(index);\r\n        if (index != -1) {\r\n          // 直接修改dom样式的颜色无效  可能是因为第三方组件的原故\r\n          // 通过引入全局样式解决\r\n          // 将正在播放的音乐前面的索引换成小喇叭\r\n          tableRows[index].children[0].querySelector(\r\n            \".cell\"\r\n          ).innerHTML = `<div><i class=\"iconfont icon-yinle\"></i></div>`;\r\n          tableRows[index].children[0]\r\n            .querySelector(\".iconfont\")\r\n            .classList.add(\"currentRow\");\r\n          tableRows[index].children[1]\r\n            .querySelector(\".cell\")\r\n            .classList.add(\"currentRow\");\r\n        }\r\n        // 清除上一首的样式\r\n        if (last != -1) {\r\n          let lastIndex = this.searchSongList.findIndex(\r\n            (item) => item.id == last\r\n          );\r\n          if (lastIndex != -1) {\r\n            // 将上一个播放的dom的小喇叭换回索引\r\n            tableRows[lastIndex].children[0].querySelector(\r\n              \".cell\"\r\n            ).innerHTML = `<div>${\r\n              lastIndex + 1 < 10 ? \"0\" + (lastIndex + 1) : lastIndex + 1\r\n            }</div>`;\r\n\r\n            // 将上一首的类名删掉  小喇叭的html已经被替换了，不需要再还原\r\n            tableRows[lastIndex].children[1]\r\n              .querySelector(\".cell\")\r\n              .classList.remove(\"currentRow\");\r\n          }\r\n        }\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    this.getMultMath();\r\n    this.getSearchSong();\r\n    // console.log(this.$route.params.id);\r\n  },\r\n  watch: {\r\n    \"$store.state.musicId\"(current, last) {\r\n      this.handleDOM(current, last);\r\n    },\r\n  },\r\n  async mounted() {\r\n    this.$nextTick(() => {\r\n      // 判断是否和上一次打开的歌单相同\r\n      if (this.$route.params.id == this.$store.state.musicListId) {\r\n        this.handleDOM(this.$store.state.musicId);\r\n      }\r\n    });\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.SearchSong {\r\n  padding: 0 15px;\r\n}\r\n\r\n.tip {\r\n  font-weight: bold;\r\n  color: rgb(34, 34, 34);\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.matchTitle {\r\n  font-size: 12px;\r\n  color: rgb(34, 34, 34);\r\n  margin: 5px 0;\r\n}\r\n\r\n.matchResult {\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n  background-color: #f4f4f4;\r\n  width: 270px;\r\n  height: 65px;\r\n  margin-bottom: 20px;\r\n  cursor: pointer;\r\n}\r\n\r\n.matchCover {\r\n  width: 65px;\r\n  height: 65px;\r\n}\r\n\r\n.matchCover img {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.matchName {\r\n  font-size: 13px;\r\n  color: rgb(31, 31, 31);\r\n  margin-left: 10px;\r\n}\r\n\r\n.multiMatch i {\r\n  position: absolute;\r\n  transform: translateY(-50%);\r\n  right: 15px;\r\n  top: 50%;\r\n}\r\n\r\n.page {\r\n  width: 100%;\r\n  text-align: center;\r\n  padding-bottom: 20px;\r\n  margin: 20px 0;\r\n}\r\n</style>","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SearchSong.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SearchSong.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./SearchSong.vue?vue&type=template&id=4d5f8a31&scoped=true&\"\nimport script from \"./SearchSong.vue?vue&type=script&lang=js&\"\nexport * from \"./SearchSong.vue?vue&type=script&lang=js&\"\nimport style0 from \"./SearchSong.vue?vue&type=style&index=0&id=4d5f8a31&prod&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4d5f8a31\",\n  null\n  \n)\n\nexport default component.exports","\r\n// 处理音乐时长的时间\r\nexport function handleMusicTime(time) {\r\n    // 如果超过了100000 基本都是毫秒为单位的了 先转成秒的\r\n    time = parseInt(time);\r\n    if (time > 10000) {\r\n      time = Math.floor(time / 1000);\r\n    } else {\r\n      time = Math.floor(time);\r\n    }\r\n    let m = Math.floor(time / 60);\r\n    let s = Math.floor(time % 60);\r\n    m = m < 10 ? '0' + m : m;\r\n    s = s < 10 ? '0' + s : s;\r\n    return m + ':' + s;\r\n}\r\n\r\n// 生成当前时间戳\r\nexport function getTimeStamp() {\r\n  return Date.now();\r\n}\r\n\r\n// 将播放时长还原为秒数\r\nexport function returnSecond(time) {\r\n  time = time.split(':');\r\n  let m = parseInt(time[0]);\r\n  let s = parseInt(time[1]);\r\n  return m * 60 + s;\r\n}\r\n\r\n// 格式化时间\r\nexport function formatDate(date, fmt) {\r\n  // 1.获取年份\r\n  // y+ 1个或者多个y  yyyy:2021\r\n  // y* 0个或者多个y\r\n  // y? 0个或者1个y\r\n  if (/(y+)/.test(fmt)) {\r\n    // RegExp.$1 指的是与正则表达式匹配的第一个子匹配\r\n    fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));\r\n  }\r\n\r\n  // 2.获取月日等\r\n  let o = {\r\n    'M+': date.getMonth() + 1,\r\n    'd+': date.getDate(),\r\n    'h+': date.getHours(),\r\n    'm+': date.getMinutes(),\r\n    's+': date.getSeconds(),\r\n  };\r\n  for (let k in o) {\r\n    if (new RegExp(`(${k})`).test(fmt)) {\r\n      let str = o[k] + '';\r\n      fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? str : padLeftZero(str));\r\n    }\r\n  }\r\n  return fmt;\r\n}\r\n\r\n// 处理大于1w的数字\r\nexport function handleNum(num) {\r\n  if (num > 10000) {\r\n    num = (num / 10000).toFixed(1);\r\n    return num + '万';\r\n  } else {\r\n    return num;\r\n  }\r\n}\r\n\r\n// 不足两位补足两位 04:05:09\r\nfunction padLeftZero(str) {\r\n  // str=4 -> 004 截取 1 位 -> 04\r\n  return ('00' + str).substr(str.length);\r\n}"],"names":["render","_vm","this","_c","_self","staticClass","_v","_s","songCount","multiMatch","artist","currentPage","on","$event","goToSingerDetail","id","attrs","img1v1Url","name","_e","staticStyle","searchSongList","clickRow","handleIndex","length","pageChange","staticRenderFns","data","methods","res","$request","keywords","$route","params","result","offset","songs","forEach","item","index","dt","handleMusicTime","row","musicList","$store","state","currentIndex","isExist","find","commit","splice","musicListId","page","getSearchSong","$router","push","handleDOM","current","last","document","querySelector","tableRows","querySelectorAll","findIndex","console","log","children","innerHTML","classList","add","lastIndex","remove","created","getMultMath","watch","$nextTick","musicId","component","time","parseInt","Math","floor","m","s","getTimeStamp","Date","now","returnSecond","split","formatDate","date","fmt","test","replace","RegExp","$1","getFullYear","substr","o","getMonth","getDate","getHours","getMinutes","getSeconds","k","str","padLeftZero","handleNum","num","toFixed"],"sourceRoot":""}